# Generated by Django 4.1.4 on 2023-02-09 18:49

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0059_alter_casubmission_options_and_more'),
        ('account', '0012_remove_account_col_logs_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SotMSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basesubmission')),
                ('rank', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.account')),
            ],
            options={
                'verbose_name': 'Skill of the Month Submission',
                'verbose_name_plural': 'Skill of the Month Submissions',
            },
            bases=('main.basesubmission',),
        ),
        migrations.CreateModel(
            name='RecruitmentSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basesubmission')),
                ('recruited', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recruited_by', to='account.account')),
                ('recruiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recruited', to='account.account')),
            ],
            options={
                'verbose_name': 'Recruitment Submission',
                'verbose_name_plural': 'Recruitment Submissions',
            },
            bases=('main.basesubmission',),
        ),
        migrations.CreateModel(
            name='PVMSplitSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basesubmission')),
                ('accounts', models.ManyToManyField(to='account.account')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.content')),
            ],
            options={
                'verbose_name': 'PVM Split Submission',
                'verbose_name_plural': 'PVM Split Submissions',
            },
            bases=('main.basesubmission',),
        ),
        migrations.CreateModel(
            name='MentorSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basesubmission')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.content')),
                ('learners', models.ManyToManyField(related_name='mentor_learners', to='account.account')),
                ('mentors', models.ManyToManyField(related_name='mentored', to='account.account')),
            ],
            options={
                'verbose_name': 'Mentor Submission',
                'verbose_name_plural': 'Mentor Submissions',
            },
            bases=('main.basesubmission',),
        ),
        migrations.CreateModel(
            name='EventSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.basesubmission')),
                ('type', models.IntegerField(choices=[(0, 'PVM'), (1, 'Skilling'), (2, 'Major Event'), (3, 'Other')])),
                ('donors', models.ManyToManyField(related_name='events_donated', to='account.account')),
                ('hosts', models.ManyToManyField(related_name='events_hosted', to='account.account')),
                ('participants', models.ManyToManyField(related_name='events_participated', to='account.account')),
            ],
            options={
                'verbose_name': 'Event Submission',
                'verbose_name_plural': 'Event Submissions',
            },
            bases=('main.basesubmission',),
        ),
    ]
