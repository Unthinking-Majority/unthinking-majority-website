# Generated by Django 4.1.4 on 2023-02-07 02:49

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import dragonstone.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0012_remove_account_col_logs_and_more'),
        ('main', '0055_alter_content_ordering'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proof', models.ImageField(upload_to=dragonstone.models.get_file_path)),
                ('notes', models.TextField(blank=True)),
                ('accepted', models.BooleanField(null=True)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='SotMSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dragonstone.basesubmission')),
                ('rank', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.account')),
            ],
            bases=('dragonstone.basesubmission',),
        ),
        migrations.CreateModel(
            name='RecruitmentSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dragonstone.basesubmission')),
                ('recruited', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='b', to='account.account')),
                ('recruiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='a', to='account.account')),
            ],
            bases=('dragonstone.basesubmission',),
        ),
        migrations.CreateModel(
            name='PVMSplitSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dragonstone.basesubmission')),
                ('accounts', models.ManyToManyField(to='account.account')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.content')),
            ],
            bases=('dragonstone.basesubmission',),
        ),
        migrations.CreateModel(
            name='MentorSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dragonstone.basesubmission')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.account')),
                ('learners', models.ManyToManyField(related_name='mentor_learners', to='account.account')),
                ('mentors', models.ManyToManyField(related_name='mentored', to='account.account')),
            ],
            bases=('dragonstone.basesubmission',),
        ),
        migrations.CreateModel(
            name='EventSubmission',
            fields=[
                ('basesubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dragonstone.basesubmission')),
                ('type', models.IntegerField(choices=[(0, 'PVM'), (1, 'Skilling'), (2, 'Major Event'), (3, 'Other')])),
                ('donators', models.ManyToManyField(related_name='events_donated', to='account.account')),
                ('hosts', models.ManyToManyField(related_name='events_hosted', to='account.account')),
                ('participants', models.ManyToManyField(related_name='events_participated', to='account.account')),
            ],
            bases=('dragonstone.basesubmission',),
        ),
    ]
