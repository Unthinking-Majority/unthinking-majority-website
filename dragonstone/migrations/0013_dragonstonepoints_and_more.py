# Generated by Django 4.2.6 on 2023-11-01 18:32

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("account", "0018_account_preferred_name"),
        ("dragonstone", "0012_auto_20231027_1909"),
    ]

    operations = [
        migrations.CreateModel(
            name="DragonstonePoints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("points", models.PositiveIntegerField(default=0)),
                ("date", models.DateTimeField(default=datetime.datetime.now)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dragonstone_points",
                        to="account.account",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dragonstone Points",
                "verbose_name_plural": "Dragonstone Points",
            },
        ),
        migrations.AlterField(
            model_name="dragonstonebasesubmission",
            name="denial_notes",
            field=models.TextField(
                blank=True, help_text="Only fill out if the submission is denied."
            ),
        ),
        migrations.CreateModel(
            name="SotMPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        choices=[(1, "1st"), (2, "2nd"), (3, "3rd")]
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="RecruitmentPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "recruited",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="account.account",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="PVMSplitPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dragonstone.pvmsplitsubmission",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="MentorPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dragonstone.mentorsubmission",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="FreeformPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="EventParticipantPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dragonstone.eventsubmission",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="EventHostPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dragonstone.eventsubmission",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.CreateModel(
            name="EventDonorPoints",
            fields=[
                (
                    "dragonstonepoints_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dragonstone.dragonstonepoints",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dragonstone.eventsubmission",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("dragonstone.dragonstonepoints",),
        ),
        migrations.AddField(
            model_name="eventsubmission",
            name="_donors",
            field=models.ManyToManyField(
                blank=True,
                related_name="test3",
                through="dragonstone.EventDonorPoints",
                to="account.account",
            ),
        ),
        migrations.AddField(
            model_name="eventsubmission",
            name="_hosts",
            field=models.ManyToManyField(
                blank=True,
                related_name="test1",
                through="dragonstone.EventHostPoints",
                to="account.account",
            ),
        ),
        migrations.AddField(
            model_name="eventsubmission",
            name="_participants",
            field=models.ManyToManyField(
                blank=True,
                related_name="test2",
                through="dragonstone.EventParticipantPoints",
                to="account.account",
            ),
        ),
        migrations.AddField(
            model_name="mentorsubmission",
            name="_mentors",
            field=models.ManyToManyField(
                related_name="test4",
                through="dragonstone.MentorPoints",
                to="account.account",
            ),
        ),
        migrations.AddField(
            model_name="pvmsplitsubmission",
            name="_accounts",
            field=models.ManyToManyField(
                related_name="temp",
                through="dragonstone.PVMSplitPoints",
                to="account.account",
            ),
        ),
    ]
